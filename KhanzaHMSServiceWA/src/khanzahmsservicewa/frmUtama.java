/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package khanzahmsservicewa;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import fungsi.koneksiDB;
import fungsi.sekuel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.swing.Timer;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

/**
 *
 * @author windiartonugroho
 */
public class frmUtama extends javax.swing.JFrame {
    private  Connection koneksi=koneksiDB.condb();
    private  sekuel Sequel=new sekuel();
    private  String requestJson,URL="",
              nol_jam = "",nol_menit = "",nol_detik = "",jam="",menit="",detik="",hari="";
    private HttpHeaders headers;
    private HttpEntity requestEntity;
    private ObjectMapper mapper = new ObjectMapper();
    private JsonNode root;
    private SSLContext sslContext;
    private SSLSocketFactory sslFactory;
    private Scheme scheme;
    private HttpComponentsClientHttpRequestFactory factory;
    private  PreparedStatement ps;
    private  ResultSet rs;
    private  Calendar cal = Calendar.getInstance();
    private  int day = cal.get(Calendar.DAY_OF_WEEK);
    private  SimpleDateFormat tanggalFormat = new SimpleDateFormat("yyyy-MM-dd");
    private  Date date = new Date();  

    public RestTemplate getRest() throws NoSuchAlgorithmException, KeyManagementException {
        sslContext = SSLContext.getInstance("SSL");
        TrustManager[] trustManagers= {
            new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() {return null;}
                public void checkServerTrusted(X509Certificate[] arg0, String arg1)throws CertificateException {}
                public void checkClientTrusted(X509Certificate[] arg0, String arg1)throws CertificateException {}
            }
        };
        sslContext.init(null,trustManagers , new SecureRandom());
        sslFactory=new SSLSocketFactory(sslContext,SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
        scheme=new Scheme("https",443,sslFactory);
        factory=new HttpComponentsClientHttpRequestFactory();
        factory.getHttpClient().getConnectionManager().getSchemeRegistry().register(scheme);
        return new RestTemplate(factory);
    }
    
    /**
     * Creates new form frmUtama
     */
    public frmUtama() {
        initComponents();
        
        this.setSize(490,340);
        
        date = new Date();  
        Tanggal1.setText(tanggalFormat.format(date)); 
        Tanggal2.setText(tanggalFormat.format(date)); 
        
        jam();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TeksArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Tanggal1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Tanggal2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SIMKES Khanza Service WA Otomatis");

        TeksArea.setColumns(20);
        TeksArea.setRows(5);
        jScrollPane1.setViewportView(TeksArea);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Tanggal :");
        jLabel1.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel1.add(jLabel1);

        Tanggal1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(Tanggal1);

        jLabel3.setText("s.d.");
        jLabel3.setPreferredSize(new java.awt.Dimension(28, 23));
        jPanel1.add(jLabel3);

        Tanggal2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(Tanggal2);

        jLabel2.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel1.add(jLabel2);

        jButton1.setText("Keluar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmUtama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUtama().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Tanggal1;
    private javax.swing.JTextField Tanggal2;
    private javax.swing.JTextArea TeksArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private void jam(){
        ActionListener taskPerformer = new ActionListener(){
            private int nilai_jam;
            private int nilai_menit;
            private int nilai_detik;
            public void actionPerformed(ActionEvent e) {
                nol_jam = "";
                nol_menit = "";
                nol_detik = "";
                Date now = Calendar.getInstance().getTime();
                // Mengambil nilaj JAM, MENIT, dan DETIK Sekarang
                nilai_jam = now.getHours();
                nilai_menit = now.getMinutes();
                nilai_detik = now.getSeconds();
                // Jika nilai JAM lebih kecil dari 10 (hanya 1 digit)
                if (nilai_jam <= 9) {
                    // Tambahkan "0" didepannya
                    nol_jam = "0";
                }
                // Jika nilai MENIT lebih kecil dari 10 (hanya 1 digit)
                if (nilai_menit <= 9) {
                    // Tambahkan "0" didepannya
                    nol_menit = "0";
                }
                // Jika nilai DETIK lebih kecil dari 10 (hanya 1 digit)
                if (nilai_detik <= 9) {
                    // Tambahkan "0" didepannya
                    nol_detik = "0";
                }
                // Membuat String JAM, MENIT, DETIK
                jam = nol_jam + Integer.toString(nilai_jam);
                menit = nol_menit + Integer.toString(nilai_menit);
                detik = nol_detik + Integer.toString(nilai_detik);
                if(jam.equals("01")&&menit.equals("01")&&detik.equals("01")){
                    TeksArea.setText("");
                    date = new Date();  
                    Tanggal1.setText(tanggalFormat.format(date)); 
                    Tanggal2.setText(tanggalFormat.format(date)); 
                }
                if(detik.equals("01")&&((nilai_menit%5)==0)){
                    day=cal.get(Calendar.DAY_OF_WEEK);
                    switch (day) {
                        case 1:
                            hari="AKHAD";
                            break;
                        case 2:
                            hari="SENIN";
                            break;
                        case 3:
                            hari="SELASA";
                            break;
                        case 4:
                            hari="RABU";
                            break;
                        case 5:
                            hari="KAMIS";
                            break;
                        case 6:
                            hari="JUMAT";
                            break;
                        case 7:
                            hari="SABTU";
                            break;
                        default:
                            break;
                    }
                    
                    try {
                        koneksi=koneksiDB.condb();
                        TeksArea.append("Menjalankan WS Kirim WA otomatis\n");
                        
                        //pasien JKN
                        ps=koneksi.prepareStatement(
                                "select booking_registrasi.tanggal_booking,booking_registrasi.jam_booking,booking_registrasi.no_rkm_medis, "+
                                "pasien.nm_pasien,booking_registrasi.tanggal_periksa,booking_registrasi.kd_dokter,"+
                                "dokter.nm_dokter,booking_registrasi.kd_poli,poliklinik.nm_poli,booking_registrasi.no_reg, "+
                                "pasien.namakeluarga,concat(pasien.alamat,', ',kelurahan.nm_kel,', ',kecamatan.nm_kec,', ',kabupaten.nm_kab) as alamatpj,pasien.kelurahanpj,pasien.kecamatanpj,pasien.no_tlp,"+
                                "pasien.kabupatenpj,pasien.propinsipj,pasien.keluarga,TIMESTAMPDIFF(YEAR, pasien.tgl_lahir, CURDATE()) as tahun, "+
                                "(TIMESTAMPDIFF(MONTH, pasien.tgl_lahir, CURDATE()) - ((TIMESTAMPDIFF(MONTH, pasien.tgl_lahir, CURDATE()) div 12) * 12)) as bulan, "+
                                "TIMESTAMPDIFF(DAY, DATE_ADD(DATE_ADD(pasien.tgl_lahir,INTERVAL TIMESTAMPDIFF(YEAR, pasien.tgl_lahir, CURDATE()) YEAR), INTERVAL TIMESTAMPDIFF(MONTH, pasien.tgl_lahir, CURDATE()) - ((TIMESTAMPDIFF(MONTH, pasien.tgl_lahir, CURDATE()) div 12) * 12) MONTH), CURDATE()) as hari, "+
                                "booking_registrasi.limit_reg,booking_registrasi.status,list_wa.status_kirim_wa,booking_registrasi.kd_pj,penjab.png_jawab,DATEDIFF(booking_registrasi.tanggal_periksa,booking_registrasi.tanggal_booking) as selisih "+
                                "from booking_registrasi inner join pasien on booking_registrasi.no_rkm_medis=pasien.no_rkm_medis "+
                                "inner join dokter on booking_registrasi.kd_dokter=dokter.kd_dokter "+
                                "inner join poliklinik on booking_registrasi.kd_poli=poliklinik.kd_poli "+
                                "inner join penjab on booking_registrasi.kd_pj=penjab.kd_pj "+
                                "inner join kelurahan on pasien.kd_kel=kelurahan.kd_kel "+
                                "inner join kecamatan on pasien.kd_kec=kecamatan.kd_kec "+
                                "inner join kabupaten on pasien.kd_kab=kabupaten.kd_kab "+
                                "left join list_wa on booking_registrasi.no_rkm_medis = list_wa.no_rkm_medis and booking_registrasi.tanggal_periksa = list_wa.tanggal_periksa "+
                                "where booking_registrasi.tanggal_booking between '"+Tanggal1.getText()+"' and '"+Tanggal2.getText()+"' and list_wa.status_kirim_wa<>'Terkirim' and booking_registrasi.kd_pj <>'BPJ' order by booking_registrasi.tanggal_booking,dokter.nm_dokter");
                        try {
                            rs=ps.executeQuery();
                            while(rs.next()){
                                if (!rs.getString("selisih").equals("1")){
                                    try {     
                                        headers= new HttpHeaders();
                                        headers.setContentType(MediaType.APPLICATION_JSON);
                                        headers.add("Authorization","#RpNCYp0ALM@9uuN!G#F");
                                        URL = "https://api.fonnte.com/send";
                                        String kirim = Sequel.cariIsi("select date_sub('"+rs.getString("tanggal_periksa")+"', interval 1 day)");
                                        requestJson ="{\"target\":\""+rs.getString("no_tlp")+"\","+
                                                    "\"schedule\":"+Sequel.cariIsi("select unix_timestamp('"+kirim+" 08:00:00')")+","+
                                                    "\"message\":\"Assalamu'alaikum Warahmatullahi Wabarakatuh, \\r\\n\\r\\nMengingatkan kembali kepada saudara "+rs.getString("nm_pasien")+" \\r\\nDengan No.Rekam Medis "+rs.getString("no_rkm_medis")+" \\r\\nDengan tujuan pemeriksaan di "+rs.getString("nm_poli")+" \\r\\nPada tanggal "+rs.getString("tanggal_periksa")+" \\r\\nDengan kode booking "+rs.getString("no_reg")+" \\r\\nAgar bisa datang 30 menit sebelum jam praktek dokter dimulai \\r\\n\\r\\nCustomer Service RS ISLAM AMINAH BLITAR\\r\\n#AYO_KE_RSI\""+
                                                    "}";
                                        TeksArea.append("JSON : "+requestJson+"\n");
                                        requestEntity = new HttpEntity(requestJson,headers);
                                        requestJson=getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody();
                                        TeksArea.append("JSON : "+requestJson+"\n");
                                        root = mapper.readTree(requestJson);
                                        if(root.path("detail").asText().equals("success! message will be sent on scheduled time")){
                                            Sequel.queryu2("update list_wa set status_kirim_wa='Terkirim' where no_rkm_medis=? and tanggal_periksa=?",2,new String[]{
                                                rs.getString("no_rkm_medis"),rs.getString("tanggal_periksa")
                                            });
                                        }  
                                    }catch (Exception ex) {
                                        System.out.println("Notifikasi Bridging : "+ex);
                                    }
                                }else{
//                                    try {     
//                                        headers= new HttpHeaders();
//                                        headers.setContentType(MediaType.APPLICATION_JSON);
//                                        headers.add("Authorization","#RpNCYp0ALM@9uuN!G#F");
//                                        URL = "https://api.fonnte.com/send";
//                                        requestJson ="{\"target\":\""+rs.getString("no_tlp")+"\","+
//                                                    "\"schedule\":"+Sequel.cariIsi("select unix_timestamp('"+rs.getString("tanggal_periksa")+" 09:00:00')")+","+
//                                                    "\"message\":\"Assalamu'alaikum Warahmatullahi Wabarakatuh, \\r\\n\\r\\nMengingatkan kembali kepada saudara "+rs.getString("nm_pasien")+" \\r\\nDengan No.Rekam Medis "+rs.getString("no_rkm_medis")+" \\r\\nDengan tujuan pemeriksaan di "+rs.getString("nm_poli")+" \\r\\nPada tanggal "+rs.getString("tanggal_periksa")+" \\r\\nDengan kode booking "+rs.getString("no_reg")+" \\r\\nAgar bisa datang 30 menit sebelum jam praktek dokter dimulai \\r\\n\\r\\nCustomer Service RS ISLAM AMINAH BLITAR\\r\\n#AYO_KE_RSI\""+
//                                                    "}";
//                                        TeksArea.append("JSON : "+requestJson+"\n");
//                                        requestEntity = new HttpEntity(requestJson,headers);
//                                        requestJson=getRest().exchange(URL, HttpMethod.POST, requestEntity, String.class).getBody();
//                                        TeksArea.append("JSON : "+requestJson+"\n");
//                                        root = mapper.readTree(requestJson);
//                                        if(root.path("detail").asText().equals("success! message will be sent on scheduled time")){
//                                            Sequel.queryu2("update list_wa set status_kirim_wa='Terkirim' where no_rkm_medis=? and tanggal_periksa=?",2,new String[]{
//                                                rs.getString("no_rkm_medis"),rs.getString("tanggal_periksa")
//                                            });
//                                        }  
//                                    }catch (Exception ex) {
//                                        System.out.println("Notifikasi Bridging : "+ex);
//                                    }
                                }
                            }
                        } catch (Exception ex) {
                            System.out.println("Notif : "+ex);
                        } finally{
                            if(rs!=null){
                                rs.close();
                            }
                            if(ps!=null){
                                ps.close();
                            }
                        }
                        
                        TeksArea.append("Proses update selesai\n");
                    } catch (Exception ez) {
                        System.out.println("Notif : "+ez);
                    }
                    
                    
                }
            }
        };
        // Timer
        new Timer(1000, taskPerformer).start();
    }
}
